{"remainingRequest":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\src\\pages\\qiuzhixinxi\\add.vue?vue&type=template&id=eb19e464&scoped=true&","dependencies":[{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\src\\pages\\qiuzhixinxi\\add.vue","mtime":1713276120000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHN0eWxlOiB7CiAgICAgICAgYm9yZGVyOiAiMXB4IHNvbGlkICM5Y2UzYjUiLAogICAgICAgIHBhZGRpbmc6ICIyMHB4IiwKICAgICAgICBib3hTaGFkb3c6ICIwcHggMnB4IDZweCAjY2NjLGluc2V0IDBweCAwcHggNjAwcHggMHB4ICNlMGY4ZTgiLAogICAgICAgIG1hcmdpbjogIjIwcHggYXV0byAwIiwKICAgICAgICBib3JkZXJSYWRpdXM6ICIxNnB4IiwKICAgICAgICBiYWNrZ3JvdW5kOiAiI2ZmZiIsCiAgICAgICAgd2lkdGg6ICIxMjAwcHgiLAogICAgICAgIHBvc2l0aW9uOiAicmVsYXRpdmUiCiAgICAgIH0KICAgIH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJlbC1mb3JtIiwKICAgICAgICB7CiAgICAgICAgICByZWY6ICJydWxlRm9ybSIsCiAgICAgICAgICBzdGF0aWNDbGFzczogImFkZC11cGRhdGUtcHJldmlldyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBtb2RlbDogX3ZtLnJ1bGVGb3JtLAogICAgICAgICAgICBydWxlczogX3ZtLnJ1bGVzLAogICAgICAgICAgICAibGFiZWwtd2lkdGgiOiAiODBweCIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIui0puWPtyIsIHByb3A6ICJ6aGFuZ2hhbyIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImVsLWlucHV0IiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLotKblj7ciLCBjbGVhcmFibGU6ICIiIH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnJ1bGVGb3JtLnpoYW5naGFvLAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnJ1bGVGb3JtLCAiemhhbmdoYW8iLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJydWxlRm9ybS56aGFuZ2hhbyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJlbC1mb3JtLWl0ZW0iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjBweCBzb2xpZCAjZGZkZmRmIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIxMHB4IiwKICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIjBweCAwcHggMHB4ICNlZWUiLAogICAgICAgICAgICAgICAgbWFyZ2luOiAiMCAwIDhweCAwIiwKICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogIjhweCIsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAibm9uZSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IGxhYmVsOiAi5aeT5ZCNIiwgcHJvcDogInhpbmdtaW5nIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZWwtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuWnk+WQjSIsIGNsZWFyYWJsZTogIiIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucnVsZUZvcm0ueGluZ21pbmcsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJ4aW5nbWluZyIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJ1bGVGb3JtLnhpbmdtaW5nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImVsLWZvcm0taXRlbSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgYm9yZGVyOiAiMHB4IHNvbGlkICNkZmRmZGYiLAogICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgYm94U2hhZG93OiAiMHB4IDBweCAwcHggI2VlZSIsCiAgICAgICAgICAgICAgICBtYXJnaW46ICIwIDAgOHB4IDAiLAogICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiOHB4IiwKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICJub25lIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICLmgKfliKsiLCBwcm9wOiAieGluZ2JpZSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImVsLWlucHV0IiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLmgKfliKsiLCBjbGVhcmFibGU6ICIiIH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnJ1bGVGb3JtLnhpbmdiaWUsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJ4aW5nYmllIiwgJCR2KQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicnVsZUZvcm0ueGluZ2JpZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJlbC1mb3JtLWl0ZW0iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjBweCBzb2xpZCAjZGZkZmRmIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIxMHB4IiwKICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIjBweCAwcHggMHB4ICNlZWUiLAogICAgICAgICAgICAgICAgbWFyZ2luOiAiMCAwIDhweCAwIiwKICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogIjhweCIsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAibm9uZSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IGxhYmVsOiAi5omL5py65Y+356CBIiwgcHJvcDogInNob3VqaWhhb21hIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZWwtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuaJi+acuuWPt+eggSIsIGNsZWFyYWJsZTogIiIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucnVsZUZvcm0uc2hvdWppaGFvbWEsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJzaG91amloYW9tYSIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJ1bGVGb3JtLnNob3VqaWhhb21hIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfdm0udHlwZSAhPSAiY3Jvc3MiIHx8IChfdm0udHlwZSA9PSAiY3Jvc3MiICYmICFfdm0ucm8udG91eGlhbmcpCiAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIjBweCAwcHggMHB4ICNlZWUiLAogICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiOHB4IiwKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAibm9uZSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICLlpLTlg48iLCBwcm9wOiAidG91eGlhbmciIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJmaWxlLXVwbG9hZCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdGlwOiAi54K55Ye75LiK5Lyg5aS05YOPIiwKICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbjogImZpbGUvdXBsb2FkIiwKICAgICAgICAgICAgICAgICAgICAgIGxpbWl0OiAzLAogICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBmaWxlVXJsczogX3ZtLnJ1bGVGb3JtLnRvdXhpYW5nCiAgICAgICAgICAgICAgICAgICAgICAgID8gX3ZtLnJ1bGVGb3JtLnRvdXhpYW5nCiAgICAgICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7IGNoYW5nZTogX3ZtLnRvdXhpYW5nVXBsb2FkQ2hhbmdlIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICA6IF9jKAogICAgICAgICAgICAgICAgImVsLWZvcm0taXRlbSIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidXBsb2FkIiwKICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIjBweCAwcHggMHB4ICNlZWUiLAogICAgICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiOHB4IiwKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAibm9uZSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICLlpLTlg48iLCBwcm9wOiAidG91eGlhbmciIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF92bS5ydWxlRm9ybS50b3V4aWFuZy5zdWJzdHJpbmcoMCwgNCkgPT0gImh0dHAiCiAgICAgICAgICAgICAgICAgICAgPyBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6IF92bS5pbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ1cGxvYWQtaW1nIiwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1yaWdodCI6ICIyMHB4IiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogX3ZtLnJ1bGVGb3JtLnRvdXhpYW5nLnNwbGl0KCIsIilbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjEwMCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fbChfdm0ucnVsZUZvcm0udG91eGlhbmcuc3BsaXQoIiwiKSwgZnVuY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0sCiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4CiAgICAgICAgICAgICAgICAgICAgICApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInVwbG9hZC1pbWciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tcmlnaHQiOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0uYmFzZVVybCArIGl0ZW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEwMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIxMDAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIuW5tOm+hCIsIHByb3A6ICJuaWFubGluZyIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImVsLWlucHV0IiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLlubTpvoQiLCBjbGVhcmFibGU6ICIiIH0sCiAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnJ1bGVGb3JtLm5pYW5saW5nLAogICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLnJ1bGVGb3JtLCAibmlhbmxpbmciLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJydWxlRm9ybS5uaWFubGluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJlbC1mb3JtLWl0ZW0iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgIGJvcmRlcjogIjBweCBzb2xpZCAjZGZkZmRmIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIxMHB4IiwKICAgICAgICAgICAgICAgIGJveFNoYWRvdzogIjBweCAwcHggMHB4ICNlZWUiLAogICAgICAgICAgICAgICAgbWFyZ2luOiAiMCAwIDhweCAwIiwKICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogIjhweCIsCiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAibm9uZSIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IGxhYmVsOiAi5a2m5Y6GIiwgcHJvcDogInh1ZWxpIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZWwtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyBwbGFjZWhvbGRlcjogIuWtpuWOhiIsIGNsZWFyYWJsZTogIiIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucnVsZUZvcm0ueHVlbGksCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJ4dWVsaSIsICQkdikKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJ1bGVGb3JtLnh1ZWxpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImVsLWZvcm0taXRlbSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgYm9yZGVyOiAiMHB4IHNvbGlkICNkZmRmZGYiLAogICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgYm94U2hhZG93OiAiMHB4IDBweCAwcHggI2VlZSIsCiAgICAgICAgICAgICAgICBtYXJnaW46ICIwIDAgOHB4IDAiLAogICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiOHB4IiwKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICJub25lIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICLmr5XkuJrlrabmoKEiLCBwcm9wOiAiYml5ZXh1ZXhpYW8iIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJlbC1pbnB1dCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi5q+V5Lia5a2m5qChIiwgY2xlYXJhYmxlOiAiIiB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ydWxlRm9ybS5iaXlleHVleGlhbywKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5ydWxlRm9ybSwgImJpeWV4dWV4aWFvIiwgJCR2KQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicnVsZUZvcm0uYml5ZXh1ZXhpYW8iCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIuaThemVvyIsIHByb3A6ICJzaGFuemhhbmciIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJlbC1pbnB1dCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi5pOF6ZW/IiwgY2xlYXJhYmxlOiAiIiB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ydWxlRm9ybS5zaGFuemhhbmcsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJzaGFuemhhbmciLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJydWxlRm9ybS5zaGFuemhhbmciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIueugOWOhumZhOS7tiIsIHByb3A6ICJqaWFubGlmdWppYW4iIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJmaWxlLXVwbG9hZCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHRpcDogIueCueWHu+S4iuS8oOeugOWOhumZhOS7tiIsCiAgICAgICAgICAgICAgICAgIGFjdGlvbjogImZpbGUvdXBsb2FkIiwKICAgICAgICAgICAgICAgICAgbGltaXQ6IDEsCiAgICAgICAgICAgICAgICAgIG11bHRpcGxlOiB0cnVlLAogICAgICAgICAgICAgICAgICBmaWxlVXJsczogX3ZtLnJ1bGVGb3JtLmppYW5saWZ1amlhbgogICAgICAgICAgICAgICAgICAgID8gX3ZtLnJ1bGVGb3JtLmppYW5saWZ1amlhbgogICAgICAgICAgICAgICAgICAgIDogIiIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5qaWFubGlmdWppYW5VcGxvYWRDaGFuZ2UgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImVsLWZvcm0taXRlbSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgYm9yZGVyOiAiMHB4IHNvbGlkICNkZmRmZGYiLAogICAgICAgICAgICAgICAgcGFkZGluZzogIjEwcHgiLAogICAgICAgICAgICAgICAgYm94U2hhZG93OiAiMHB4IDBweCAwcHggI2VlZSIsCiAgICAgICAgICAgICAgICBtYXJnaW46ICIwIDAgOHB4IDAiLAogICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiOHB4IiwKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICJub25lIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6ICLlr7vmib7ogYzkvY0iLCBwcm9wOiAieHVuemhhb3poaXdlaSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZWwtc2VsZWN0IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcGxhY2Vob2xkZXI6ICLor7fpgInmi6nlr7vmib7ogYzkvY0iIH0sCiAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ydWxlRm9ybS54dW56aGFvemhpd2VpLAogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5ydWxlRm9ybSwgInh1bnpoYW96aGl3ZWkiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicnVsZUZvcm0ueHVuemhhb3poaXdlaSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF92bS5fbChfdm0ueHVuemhhb3poaXdlaU9wdGlvbnMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygiZWwtb3B0aW9uIiwgewogICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgbGFiZWw6IGl0ZW0sIHZhbHVlOiBpdGVtIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIuW+hemBh+iWqumFrCIsIHByb3A6ICJkYWl5dXhpbmNob3UiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJlbC1pbnB1dCIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHBsYWNlaG9sZGVyOiAi5b6F6YGH6Jaq6YWsIiwgY2xlYXJhYmxlOiAiIiB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ydWxlRm9ybS5kYWl5dXhpbmNob3UsCiAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ucnVsZUZvcm0sICJkYWl5dXhpbmNob3UiLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJydWxlRm9ybS5kYWl5dXhpbmNob3UiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIuWPkeW4g+aXpeacnyIsIHByb3A6ICJmYWJ1cmlxaSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImVsLWRhdGUtcGlja2VyIiwgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgZm9ybWF0OiAieXl5eSDlubQgTU0g5pyIIGRkIOaXpSIsCiAgICAgICAgICAgICAgICAgICJ2YWx1ZS1mb3JtYXQiOiAieXl5eS1NTS1kZCIsCiAgICAgICAgICAgICAgICAgIHR5cGU6ICJkYXRlIiwKICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICLlj5HluIPml6XmnJ8iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5ydWxlRm9ybS5mYWJ1cmlxaSwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5ydWxlRm9ybSwgImZhYnVyaXFpIiwgJCR2KQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAicnVsZUZvcm0uZmFidXJpcWkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZWwtZm9ybS1pdGVtIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBib3JkZXI6ICIwcHggc29saWQgI2RmZGZkZiIsCiAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMTBweCIsCiAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIwcHggMHB4IDBweCAjZWVlIiwKICAgICAgICAgICAgICAgIG1hcmdpbjogIjAgMCA4cHggMCIsCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI4cHgiLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIm5vbmUiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBhdHRyczogeyBsYWJlbDogIuW3peS9nOe7j+WOhiIsIHByb3A6ICJnb25nenVvamluZ2xpIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiZWwtaW5wdXQiLCB7CiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dGFyZWEiLCByb3dzOiA4LCBwbGFjZWhvbGRlcjogIuW3peS9nOe7j+WOhiIgfSwKICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ucnVsZUZvcm0uZ29uZ3p1b2ppbmdsaSwKICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5ydWxlRm9ybSwgImdvbmd6dW9qaW5nbGkiLCAkJHYpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJydWxlRm9ybS5nb25nenVvamluZ2xpIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImVsLWZvcm0taXRlbSIsCiAgICAgICAgICAgIHsgc3R5bGU6IHsgcGFkZGluZzogIjAiLCBtYXJnaW46ICIyMHB4IDAgMjBweCAwIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJlbC1idXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgIGJvcmRlcjogIjAiLAogICAgICAgICAgICAgICAgICAgIGN1cnNvcjogInBvaW50ZXIiLAogICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIwIiwKICAgICAgICAgICAgICAgICAgICBib3hTaGFkb3c6ICIxcHggMnB4IDNweCAjYWFhIiwKICAgICAgICAgICAgICAgICAgICBtYXJnaW46ICIwIDIwcHggMCAwIiwKICAgICAgICAgICAgICAgICAgICBjb2xvcjogIiNmZmYiLAogICAgICAgICAgICAgICAgICAgIG91dGxpbmU6ICJub25lIiwKICAgICAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICI0cHgiLAogICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6CiAgICAgICAgICAgICAgICAgICAgICAibGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgxNywxMTIsMjEwLDEpIDAlLCByZ2JhKDgsMTc5LDY4LDEpIDEwMCUpIiwKICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjEyOHB4IiwKICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiAiNDBweCIsCiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICIxNHB4IiwKICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICI0MHB4IgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAicHJpbWFyeSIgfSwKICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5vblN1Ym1pdCB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi5o+Q5LqkIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJlbC1idXR0b24iLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgIGJvcmRlcjogIjFweCBzb2xpZCAjYmJiIiwKICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICJwb2ludGVyIiwKICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgYm94U2hhZG93OiAiMXB4IDJweCA2cHggI2NjYyIsCiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjOTk5IiwKICAgICAgICAgICAgICAgICAgICBvdXRsaW5lOiAibm9uZSIsCiAgICAgICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAiNHB4IiwKICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAiI2ZmZiIsCiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICIxMjhweCIsCiAgICAgICAgICAgICAgICAgICAgbGluZUhlaWdodDogIjQwcHgiLAogICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAiMTRweCIsCiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiNDBweCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmJhY2soKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFtfdm0uX3YoIui/lOWbniIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}