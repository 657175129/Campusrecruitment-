{"remainingRequest":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\src\\pages\\zaixianzixun\\add.vue?vue&type=template&id=c445c9d0&scoped=true&","dependencies":[{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\src\\pages\\zaixianzixun\\add.vue","mtime":1713276120000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Campusrecruitment\\springboot123456\\src\\main\\resources\\front\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}